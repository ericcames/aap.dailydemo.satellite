---
- name: Installing Red Hat Satellite
  tags:
    - create
  block:

    - name: Include our user info
      ansible.builtin.include_vars:
        file: files/{{ satellite_user_list_vault }}

    - name: Ensure repositories are able to be managed by subscription-manager
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
      ansible.builtin.command: subscription-manager config --rhsm.manage_repos=1

    - name: Enable all repositories needed for satellite on RHEL 8
      with_items:
        - rhel-8-for-x86_64-appstream-rpms
        - rhel-8-for-x86_64-baseos-rpms
        - satellite-{{ satellite_version }}-for-rhel-8-x86_64-rpms
        - satellite-maintenance-{{ satellite_version }}-for-rhel-8-x86_64-rpms
      when: ansible_distribution_major_version == '8' and satellite_version >= 6.11
      community.general.rhsm_repository:
        name: '{{ item }}'
        state: enabled

    - name: Enable ruby:2.7 and postgresql:12 modules for RHEL 8
      with_items:
        - '@ruby:2.7'
        - '@postgresql:12'
      when: ansible_distribution_major_version == '8' and satellite_version >= 6.11
      ansible.builtin.dnf:
        name: '{{ item }}'
        state: present

    # Workaround for @satellite:el8 until https://github.com/ansible/ansible/pull/76277 is resolved
    - name: Enable satellite:el8 module for RHEL 8
      with_items:
        - pki-core.module
        - pki-deps.module
        - satellite.module
      when: ansible_distribution_major_version == '8' and satellite_version >= 6.11
      ansible.builtin.copy:
        dest: '/etc/dnf/modules.d/{{ item }}'
        src: 'files/{{ item }}'
        owner: root
        group: root
        mode: '0644'

    - name: Install the latest version of Satellite
      ansible.builtin.dnf:
        name: satellite
        state: installed

    - name: Run the Satellite installer
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
      ansible.builtin.command: |
          satellite-installer --scenario satellite
          --foreman-initial-organization {{ satellite_organization }}
          --foreman-initial-location {{ satellite_location }}
          --foreman-initial-admin-username {{ satellite_username }}
          --foreman-initial-admin-password {{ satellite_password }}

    - name: Check to see if we need a reboot
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
      check_mode: false
      ansible.builtin.command: needs-restarting -r

    - name: Reboot server if needed
      when: result.rc == 1
      ansible.builtin.reboot:

    - name: Create the Satellite users
      loop: "{{ users }}"
      redhat.satellite.user:
        name: "{{ item['name'] }}"
        firstname: "{{ item['firstname'] }}"
        lastname: "{{ item['lastname'] }}"
        mail: "{{ item['mail'] }}"
        description: "Tell us about yourself :-)"
        admin: "{{ item['admin_account'] }}"
        user_password: "{{ item['password'] }}"
        default_organization: "{{ item['org_ids'] }}"
        auth_source: "{{ item['auth_source'] }}"
        timezone: "{{ item['timezone'] }}"
        state: present
        validate_certs: false
        server_url: "https://{{ inventory_hostname }}"

    - name: Delete Host upon unregister
      redhat.satellite.setting:
        server_url: "https://{{ inventory_hostname }}"
        name: "Delete Host upon unregister"
        value: "Yes"
        validate_certs: false

    - name: Login page footer text
      redhat.satellite.setting:
        server_url: "https://{{ inventory_hostname }}"
        name: "Login page footer text"
        value: "THIS SYSTEM IS PROVIDED FOR USE BY AUTHORIZED USERS ONLY. ALERT! You are entering into a
                secured area! Your IP, Login Time, Username has been noted and has been sent to the server
                administrator! All activities on this system are logged. Unauthorized access will be fully
                investigated and reported to the appropriate law enforcement agencies."
        validate_certs: false

    # - name: Change the hostname
    #   register: result
    #   changed_when: result.rc == 1
    #   failed_when: result.rc > 1
    #   ansible.builtin.command: |
    #       satellite-change-hostname {{ satellite_sat6_fqdn }}
    #       --username {{ satellite_username }}
    #       --pasword {{ satellite_password }}

    - name: Copy Manifest file
      ansible.builtin.copy:
        src: "files/{{ satellite_manifest }}"
        dest: /root/
        owner: root
        group: root
        mode: '0744'

    - name: Load manifest into Satellite
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
      ansible.builtin.command: |
          hammer subscription upload
          --file /root/{{ satellite_manifest }}
          --organization {{ satellite_organization }}
